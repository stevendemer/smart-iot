// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EVReading {
  id                 Int      @id @default(autoincrement())
  minChargeLevel     Int
  durationStay       Int
  currentChargeLevel Int
  carBatteryCapacity Int
  createdAt          DateTime @default(now())

  @@map("ev_readings")
}

model WeatherForecast {
  id               Int      @id @default(autoincrement())
  temperature      Int
  directRadiation  Int
  diffuseRadiation Int
  isDay            Boolean  @default(true)
  cloudCover       Float
  forecastDate     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("forecasts")
}

model EnergyPrice {
  id        Int      @id @default(autoincrement())
  price     Decimal  @db.Decimal(10, 4)
  date      String
  hour      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("energy_prices")
}

model PVAccount {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  token      String
  expiration DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  readings   PVReading[]

  @@map("pv_accounts")
}

model PVReading {
  id              Int     @id @default(autoincrement())
  inverterState   Int
  efficiency      Float
  activePower     Float
  reactivePower   Float
  devId           Int
  devTypeId       Int
  totalYield      Float
  totalInputPower Float
  runState        Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // one-to-many relation
  account   PVAccount? @relation(fields: [accountId], references: [id])
  accountId Int?

  @@map("pv_readings")
}

model AmpecoSession {
  id Int @id @default(autoincrement())

  chargePointId String

  evseId String

  sessionId Int

  startedAt DateTime

  stoppedAt DateTime

  // total amount of electricity consumed
  energy Float

  // rate of energy flow to the EV's battery
  powerKw Int

  // state of charge percent (current battery charge leve)
  socPercent Float

  // cost during the charging session
  electricityCost Float

  // the total cost to be paid
  amount Float

  createdAt DateTime @default(now())

  @@map("charging_sessions")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  hash     String
  hashedRt String?

  @@map("users")
}
